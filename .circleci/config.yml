version: 2.1

nodeimg: &nodeimg
  docker:
    - image: circleci/node:13.8.0

awscli: &awscli
  docker:
    - image: amazon/aws-cli

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    <<: *nodeimg
    steps:
      - checkout
      - restore_cache:
          keys: [frontend]
      - run:
          name: Test Frontend
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    <<: *nodeimg
    steps:
      - checkout
      - restore_cache:
          keys: [backend]
      - run:
          name: Test backend
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    <<: *nodeimg
    steps:
      - checkout
      - restore_cache:
          keys: [frontend]
      -  run:
          name: Scan Frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force

  scan-backend:
    <<: *nodeimg
    steps:
      - checkout
      - restore_cache:
          keys: [backend]
      -  run:
          name: Scan Backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    <<: *awscli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            echo ${CIRCLE_WORKFLOW_ID:0:7}" workflowid1
            echo ${CIRCLE_WORKFLOW_ID}" workflowid2
            export ProjectName=udapeople
            # aws cloudformation deploy \
            #   --template-file .circleci/files/backend.yml \
            #   --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            #   --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
            #   --tags project=udapeople \
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            echo $ProjectName 
            # aws cloudformation deploy \
            #   --template-file .circleci/files/frontend.yml \
            #   --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
            #   --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            #   --tags project=your-tag \

      # - run:
      #     name: Add back-end ip to ansible inventory
      #     command: |
      #       export STACK_NAME_BE=back-end-stack-${CIRCLE_WORKFLOW_ID}
      #       exit 1
      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - project/.circleci/ansible/inventory.txt
      # # Here's where you will add some code to rollback on failure


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [develop]
