version: 2.1

nodeimg: &nodeimg
  docker:
    - image: circleci/node:13.8.0
  working_directory: ~/project

awscli: &awscli
  docker:
    - image: amazon/aws-cli
  working_directory: ~/project

ansibleimg: &ansibleimg
  docker:
    - image: python:3.7-alpine3.11
  working_directory: ~/project

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            pwd
            cat ~/my_env
            export $(grep BACKEND_STACK ~/my_env)
            export $(grep FRONTEND_STACK ~/my_env)
            echo $FRONTEND_STACK
            echo $BACKEND_STACK
            OUTPUT_KEY=WebsiteBucketName
            export BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name $FRONTEND_STACK --query "Stacks[*].Outputs[?OutputKey=='$OUTPUT_KEY'].OutputValue" --output text)
            echo Bucket Name Is $BUCKET_NAME
            aws s3 rm s3://$BUCKET_NAME --recursive
            aws cloudformation delete-stack --stack-name $BACKEND_STACK
            aws cloudformation delete-stack --stack-name $FRONTEND_STACK
  
  revert-migrations:
    description: Revert the last migration
    # parameters:
    #   workflow_id:
    #     type: string
    steps:
      - run:
           name: Revert migrations
           when: on_fail
           command: |
             SUCCESS=$(aws ssm get-parameters --name migration-status --query "Parameters[*].Value" --output text)
             echo $SUCCESS
             if (( $SUCCESS == 1 ));  then
               cd ~/project/backend
               npm install
               npm run migration:revert
             fi

  update_ansible_image:
    description: install dependencies in python:3.7-alpine3.11 image
    steps:
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add ansible curl
            pip3 install --upgrade pip
            pip3 install awscli
            aws sts get-caller-identity
            pwd
            cd .circleci/ansible
            cat inventory.txt
  
  install_aws_cli:
    description: Install AWS Cli
    steps:
      - run:
          name: Install
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_nodejs:
    description: Install NodeJs
    steps:
      - run:
          name: Install nodejs
          command: |
            yum install tar gzip -y
            yum install -y gcc-c++ make curl;
            curl -sL https://rpm.nodesource.com/setup_15.x | bash -;
            yum install nodejs -y;

  install_packages:
    description: Install dependencies
    steps:
      - run:
           name: Install packages
           command: |
             yum install tar gzip curl unzip less -y

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm i prom-client
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    <<: *nodeimg
    steps:
      - checkout
      - restore_cache:
          keys: [frontend]
      - run:
          name: Test Frontend
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    <<: *nodeimg
    steps:
      - checkout
      - restore_cache:
          keys: [backend]
      - run:
          name: Test backend
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    <<: *nodeimg
    steps:
      - checkout
      - restore_cache:
          keys: [frontend]
      -  run:
          name: Scan Frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force

  scan-backend:
    <<: *nodeimg
    steps:
      - checkout
      - restore_cache:
          keys: [backend]
      -  run:
          name: Scan Backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    <<: *awscli
    steps:
      - checkout
      - install_packages
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            export ProjectName=udapeople
            echo BACKEND_STACK=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} >> ~/my_env
            export $(grep BACKEND_STACK ~/my_env)
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name $BACKEND_STACK \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople \
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            echo $ProjectName
            echo FRONTEND_STACK=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} >> ~/my_env
            export $(grep FRONTEND_STACK ~/my_env) 
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name $FRONTEND_STACK \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=your-tag \

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            export $(grep BACKEND_STACK ~/my_env)
            export $(grep FRONTEND_STACK ~/my_env)
            BACKEND_IP_ADDRESS=$(aws cloudformation describe-stacks --stack-name $BACKEND_STACK --query "Stacks[*].Outputs[?OutputKey=='BackendIP'].OutputValue" --output text)
            INSTANCE_ID=$(aws cloudformation describe-stacks --stack-name $BACKEND_STACK --query "Stacks[*].Outputs[?OutputKey=='InstanceID'].OututValue" --output text)
            BACKEND_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
            echo BACKEND_IP_ADDRESS $BACKEND_IP_ADDRESS
            echo BACKEND_IP $BACKEND_IP

            echo BACKEND_IP=$BACKEND_IP_ADDRESS >> ~/my_env
            echo $BACKEND_IP_ADDRESS >> .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - my_env

      # Destroy the environment if provisioning fails
      - destroy-environment

  configure-infrastructure:
    <<: *ansibleimg
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [ "73:51:04:63:36:94:d9:04:fa:67:e5:cc:3a:46:df:7f" ]

      # attach workspace
      - attach_workspace:
          at: ~/

      - update_ansible_image
      - run:
          name: Check Directory content
          command: |
            pwd
            ls -al
            ls -al ~/project
            ls -al /
            echo The current user is $(whoami)
      - run:
          name: Configure server
          command: |
            pwd
            cd .circleci/ansible
            sed -i "s/TYPEORM_PASSWORD_STRING/${TYPEORM_PASSWORD}/" roles/configure-server/tasks/main.yml
            sed -i "s/TYPEORM_USERNAME_STRING/${TYPEORM_USERNAME}/" roles/configure-server/tasks/main.yml
            sed -i "s/TYPEORM_HOST_STRING/${TYPEORM_HOST}/" roles/configure-server/tasks/main.yml
            sed -i "s/TYPEORM_DATABASE_STRING/${TYPEORM_DATABASE}/" roles/configure-server/tasks/main.yml
            ansible-playbook -i inventory.txt configure-server.yml
            cat roles/configure-server/tasks/main.yml

      # Destory the environment if provisioning fails
      - destroy-environment

  run-migrations:
    <<: *nodeimg
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - install_aws_cli
      - run: sudo apt-get install less -y
      - run:
          name: Run migrations
          command: |
            pwd
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt

      - run:
          # name: Send migration results to memstash
          name: Send migration results to aws parameter store
          command: |
            pwd
            ls -al
            aws sts get-caller-identity

            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              echo Migration succeeds
              aws ssm put-parameter --name migration-status --value 1 --overwrite --type String
            else
              echo Migration fails
              aws ssm put-parameter --name migration-status --value 0 --overwrite --type String
            fi
            cat ~/project/backend/migrations_dump.txt

      # Destory environment if provisioning fails
      - destroy-environment

  deploy-frontend:
    <<: *awscli
    steps:
      - checkout
      - install_packages
      - install_nodejs
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export $(grep BACKEND_IP ~/my_env)
            export API_URL="http://$BACKEND_IP:3030"
            echo "${API_URL}"
            echo API_URL="${API_URL}" >> frontend/.env
            cat frontend/.env

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            ls -al
            export $(grep FRONTEND_STACK ~/my_env)
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            OUTPUT_KEY=WebsiteURL
            WEBSITE_URL=$(aws cloudformation describe-stacks --stack-name $FRONTEND_STACK --query "Stacks[*].Outputs[?OutputKey=='$OUTPUT_KEY'].OutputValue" --output text)
            echo WEBSITE_URL=${WEBSITE_URL} >> ~/my_env

      - persist_to_workspace:
          root: ~/
          paths:
            - my_env

      # Destory Environment on Job failure
      - revert-migrations
      - destroy-environment

  deploy-backend:
    <<: *ansibleimg
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [ "73:51:04:63:36:94:d9:04:fa:67:e5:cc:3a:46:df:7f" ]
      - attach_workspace:
          at: ~/

      - update_ansible_image
      - run:
          name: Deploy backend
          command: |
            ls -al
            tar -C backend -czvf artifact.tar.gz .
            ls -al
            mkdir .circleci/ansible/roles/deploy/files/
            cp artifact.tar.gz .circleci/ansible/roles/deploy/files/
            ls -al .circleci/ansible/roles/deploy/files/
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is ----------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      # Destory environment on job failure
      - revert-migrations
      - destroy-environment

  smoke-test:
    <<:  *awscli
    steps:
      - checkout
      - install_packages
      - attach_workspace:
          at: ~/
      - run:
          name: Backend smoke test.
          command: |
            export $(grep BACKEND_IP ~/my_env)
            curl "http://$BACKEND_IP:3030/api/status" | tee test_be.txt
            grep ok test_be.txt
            if [[ $? == 0 ]]; then
              exit 0
            else
              exit 1
            fi

      - run:
          name: Frontend smoke test.
          command: |
            export $(grep WEBSITE_URL ~/my_env)
            echo $WEBSITE_URL
            curl ${WEBSITE_URL} | tee test_fe.txt
            grep Welcome test_fe.txt
            if [[ $? == 0 ]]; then 
              exit 0
            else
              exit 1
            fi

      # Destory environment on failure
      - revert-migrations
      - destroy-environment

  cloudfront-update:
    <<: *awscli
    steps:
      - checkout
      - install_packages
      - attach_workspace:
          at: ~/
      - run:
          name: Update cloudfront distribution
          command: |
            ls -al
            export WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack\
              --parameter-overrides WorkflowID=${WorkflowID}

      # Destory environment on failure
      - revert-migrations
      - destroy-environment


  cleanup:
    <<: *awscli
    steps:
      - checkout
      - install_packages
      - attach_workspace:
          at: ~/
      - run:
          name: Get old stack workflow id
          command: |
            export TERM=xterm
            ls -al
            echo OldWorkflowID=$(aws ssm get-parameters --name udapeople-latest-workflow-id --query "Parameters[*].Value" --output text) >> ~/my_env
            echo OldFrontendStack=$(aws ssm get-parameters --name udapeople-latest-frontend-stack --query "Parameters[*].Value" --output text) >> ~/my_env
            echo OldBackendStack=$(aws ssm get-parameters --name udapeople-latest-backend-stack --query "Parameters[*].Value" --output text) >> ~/my_env
            # Save the latest stack details to aws parameter store
            export $(grep FRONTEND_STACK ~/my_env)
            export $(grep BACKEND_STACK ~/my_env)
            aws ssm put-parameter --name udapeople-latest-workflow-id --value ${CIRCLE_WORKFLOW_ID:0:7} --overwrite --type String --output text
            aws ssm put-parameter --name udapeople-latest-frontend-stack --value ${FRONTEND_STACK} --overwrite --type String --output text
            aws ssm put-parameter --name udapeople-latest-backend-stack --value ${BACKEND_STACK} --overwrite --type String --output text

      - run:
          name: Remove old stacks and files
          command: |
            export TERM=xterm
            export $(grep OldWorkflowID ~/my_env)
            export $(grep OldFrontendStack ~/my_env)
            export $(grep OldBackendStack ~/my_env)

            OUTPUT_KEY=WebsiteBucketName
            export OLD_BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name $OldFrontendStack --query "Stacks[*].Outputs[?OutputKey=='$OUTPUT_KEY'].OutputValue" --output text)
            echo Bucket Name Is $OLD_BUCKET_NAME
            echo Old Frontend Stack $OldFrontendStack
            aws s3 rm s3://$OLD_BUCKET_NAME --recursive
            aws cloudformation delete-stack --stack-name $OldBackendStack
            aws cloudformation delete-stack --stack-name $OldFrontendStack

  redeploy-frontend:
    <<: *awscli
    steps:
      - checkout
      - install_packages
      - install_nodejs
      - run:
          name: Get backend IP
          command: |
            LATEST_WORKFLOW_ID=$(aws ssm get-parameters --name udapeople-latest-workflow-id --query "Parameters[*].Value"  --output text)
            LATEST_FRONTEND_STACK=$(aws ssm get-parameters --name udapeople-latest-frontend-stack --query "Parameters[*].Value"  --output text)
            LATEST_BACKEND_STACK=$(aws ssm get-parameters --name udapeople-latest-backend-stack --query "Parameters[*].Value"  --output text)
            echo BACKEND STACK is $LATEST_BACKEND_STACK
            echo FRONTEND STACK is $LATEST_FRONTEND_STACK
            # Use the backend stack name to get the instance id then the current instance IP
            INSTANCE_ID=$(aws cloudformation describe-stacks --stack-name ${LATEST_BACKEND_STACK} --query "Stacks[*].Outputs[?OutputKey=='InstanceID'].OutputValue" --output text)
            INSTANCE_IP=$(aws ec2 describe-instances --instance-ids ${INSTANCE_ID} --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
            # INSTANCE_IP=$(aws ec2 describe-instances --instance-ids ${INSTANCE_ID} --query "Reservations[*].Instances[*].PrivateIpAddress" --output text) # Private IP address (not used)
            echo BACKEND IP IS $INSTANCE_IP
            API_URL="http://${INSTANCE_IP}:3030"
            echo API_URL=${API_URL} >> frontend/.env
            echo LATEST_WORKFLOW_ID=${LATEST_WORKFLOW_ID} >> ~/my_env
            echo LATEST_FRONTEND_STACK=${LATEST_FRONTEND_STACK} >> ~/my_env

      - run:
          name: Update frontend stack
          command: |
            cd frontend
            npm install
            npm run build
            export $(grep LATEST_WORKFLOW_ID ~/my_env)
            tar -czvf artifact-${LATEST_WORKFLOW_ID}.tar.gz dist
            aws s3 cp dist s3://udapeople-${LATEST_WORKFLOW_ID} --recursive


  # node-exporter:
  #   <<: *ansibleimg
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: [ "73:51:04:63:36:94:d9:04:fa:67:e5:cc:3a:46:df:7f" ]
  #     - attach_workspace:
  #         at: ~/

  #     - update_ansible_image
  #     - run:
  #         name: Install node exporter on server
  #         command: |
  #           cp prometheus/node-exporter.sh .circleci/ansible/roles/configure-prometheus-node-exporter/files/
  #           cd .circleci/ansible
  #           ansible-playbook -i inventory.txt       

workflows:
  redeploy_frontend:
    jobs:
      - redeploy-frontend:
          filters:
            branches:
              only: [redeploy-frontend]
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
      # - node-exporter:
      #     requires: [deploy-backend]
